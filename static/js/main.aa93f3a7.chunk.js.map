{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","components/TextField/TextField.tsx","utils/validation.ts","components/NewMovie/NewMovie.tsx","App.tsx","index.tsx"],"names":["MovieCard","movie","className","src","imgUrl","alt","title","description","href","imdbUrl","MoviesList","movies","map","imdbId","TextField","name","value","label","placeholder","required","onChange","errorMessage","useState","Math","random","toFixed","slice","id","touched","setTouched","hasError","htmlFor","type","classNames","event","target","onBlur","isValidUrl","RegExp","test","initialFormValues","NewMovie","onAdd","count","setCount","formValues","setFormValues","imgUrlError","setImgUrlError","imbdUrlError","setImbdUrlError","isDisabled","trim","handleFormChange","onSubmit","preventDefault","prevCount","disabled","App","moviesFromServer","setMovies","newMovie","currentMovies","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.aa93f3a7.chunk.js","sourcesContent":["import React from 'react';\nimport { Movie } from '../../types/Movie';\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: Movie,\n};\n\nexport const MovieCard: React.FC<Props> = ({ movie }) => (\n  <div className=\"card\" data-cy=\"movie-card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={movie.imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{movie.title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {movie.description}\n        <br />\n        <a href={movie.imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\n\ninterface Props {\n  movies: Movie[];\n}\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard\n        key={movie.imdbId}\n        movie={movie}\n      />\n    ))}\n  </div>\n);\n","import classNames from 'classnames';\nimport React, { useState } from 'react';\n\ntype Props = {\n  name: string,\n  value: string,\n  label?: string,\n  placeholder?: string,\n  required?: boolean,\n  onChange?: (newValue: string) => void,\n  errorMessage?: string,\n\n};\n\nfunction getRandomDigits() {\n  return Math.random()\n    .toFixed(16)\n    .slice(2);\n}\n\nexport const TextField: React.FC<Props> = ({\n  name,\n  value,\n  label = name,\n  placeholder = `Enter ${label}`,\n  required = false,\n  onChange = () => { },\n  errorMessage = '',\n}) => {\n  // generage a unique id once on component load\n  const [id] = useState(() => `${name}-${getRandomDigits()}`);\n\n  // To show errors only if the field was touched (onBlur)\n  const [touched, setTouched] = useState(false);\n  const hasError = (touched && required && !value);\n\n  return (\n    <div className=\"field\">\n      <label className=\"label\" htmlFor={id}>\n        {label}\n      </label>\n\n      <div className=\"control\">\n        <input\n          type=\"text\"\n          id={id}\n          data-cy={`movie-${name}`}\n          className={classNames('input', {\n            'is-danger': hasError,\n          })}\n          placeholder={placeholder}\n          value={value}\n          onChange={event => onChange(event.target.value)}\n          onBlur={() => setTouched(true)}\n        />\n      </div>\n\n      {hasError && (\n        <p className=\"help is-danger\">{`${label} is required`}</p>\n      )}\n\n      {!!errorMessage && !hasError && touched && (\n        <p className=\"help is-danger\">{errorMessage}</p>\n      )}\n    </div>\n  );\n};\n","export const isValidUrl = (value: string) => {\n  // eslint-disable-next-line max-len\n  const pattern = new RegExp(/^((([A-Za-z]{3,9}:(?:\\/\\/)?)(?:[-;:&=+$,\\w]+@)?[A-Za-z0-9.-]+|(?:www\\.|[-;:&=+$,\\w]+@)[A-Za-z0-9.-]+)((?:\\/[+~%/.\\w-_]*)?\\??(?:[-+=&;%@,.\\w_]*)#?(?:[,.!/\\\\\\w]*))?)$/);\n\n  return pattern.test(value);\n};\n","import { useState } from 'react';\nimport { TextField } from '../TextField';\nimport { Movie } from '../../types/Movie';\n\nimport { isValidUrl } from '../../utils/validation';\n\ninterface Props {\n  onAdd: (newMovie: Movie) => void;\n}\n\nconst initialFormValues: Movie = {\n  title: '',\n  description: '',\n  imgUrl: '',\n  imdbUrl: '',\n  imdbId: '',\n};\n\nexport const NewMovie: React.FC<Props> = ({ onAdd }) => {\n  const [count, setCount] = useState(0);\n  const [formValues, setFormValues] = useState(initialFormValues);\n  const [imgUrlError, setImgUrlError] = useState('');\n  const [imbdUrlError, setImbdUrlError] = useState('');\n\n  const {\n    title,\n    description,\n    imgUrl,\n    imdbUrl,\n    imdbId,\n  } = formValues;\n\n  const validValues = title.trim()\n    && imgUrl.trim()\n    && imdbUrl.trim()\n    && imdbId.trim();\n\n  const isDisabled = !validValues || !!imgUrlError || !!imbdUrlError;\n\n  const handleFormChange = (name: string, value: string) => {\n    if (name === 'imgUrl') {\n      if (!isValidUrl(value)) {\n        setImgUrlError('Invalid image URL');\n      } else {\n        setImgUrlError('');\n      }\n    }\n\n    if (name === 'imdbUrl') {\n      if (!isValidUrl(value)) {\n        setImbdUrlError('Invalid imbd URL');\n      } else {\n        setImbdUrlError('');\n      }\n    }\n\n    setFormValues({\n      ...formValues,\n      [name]: value,\n    });\n  };\n\n  const handleReset = () => {\n    setFormValues(initialFormValues);\n  };\n\n  const handleSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n\n    handleReset();\n    setCount((prevCount) => prevCount + 1);\n\n    onAdd(formValues);\n  };\n\n  return (\n    <form\n      key={count}\n      className=\"NewMovie\"\n      onSubmit={handleSubmit}\n    >\n      <h2 className=\"title\">\n        Add a movie\n      </h2>\n\n      <TextField\n        name=\"title\"\n        label=\"Title\"\n        value={title}\n        onChange={(value) => handleFormChange('title', value)}\n        required\n      />\n\n      <TextField\n        name=\"description\"\n        label=\"Description\"\n        value={description}\n        onChange={value => handleFormChange('description', value)}\n      />\n\n      <TextField\n        name=\"imgUrl\"\n        label=\"Image URL\"\n        value={imgUrl}\n        onChange={value => handleFormChange('imgUrl', value)}\n        errorMessage={imgUrlError}\n        required\n      />\n\n      <TextField\n        name=\"imdbUrl\"\n        label=\"Imdb URL\"\n        value={imdbUrl}\n        onChange={value => handleFormChange('imdbUrl', value)}\n        errorMessage={imbdUrlError}\n        required\n      />\n\n      <TextField\n        name=\"imdbId\"\n        label=\"Imdb ID\"\n        value={imdbId}\n        onChange={value => handleFormChange('imdbId', value)}\n        required\n      />\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            data-cy=\"submit-button\"\n            className=\"button is-link\"\n            disabled={isDisabled}\n          >\n            Add\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import React, { useState } from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { NewMovie } from './components/NewMovie';\nimport moviesFromServer from './api/movies.json';\nimport { Movie } from './types/Movie';\n\nexport const App:React.FC = () => {\n  const [movies, setMovies] = useState<Movie[]>(moviesFromServer);\n\n  const addMovie = (newMovie: Movie) => {\n    setMovies((currentMovies) => [...currentMovies, newMovie]);\n  };\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movies} />\n      </div>\n      <div className=\"sidebar\">\n        <NewMovie onAdd={addMovie} />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}